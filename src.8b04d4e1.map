{"version":3,"sources":["configuration-component.ts","index.ts"],"names":[],"mappings":"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","file":"src.8b04d4e1.map","sourcesContent":["export class ConfigurationComponent {\n  public element: HTMLFormElement;\n  private script: HTMLDivElement;\n  private repo: HTMLInputElement;\n\n  constructor() {\n    this.element = document.createElement('form');\n    this.element.innerHTML = `\n      <h3>Repository</h3>\n      <p>\n        Choose the repository utterances will connect to.\n      </p>\n      <ol>\n        <li>Make sure the repo is public, otherwise your readers will not be able to view the issues/comments.</li>\n        <li>Make sure the <a href=\"https://github.com/apps/utterances\">utterances app</a>\n          is installed on the repo, otherwise users will not be able to post comments.\n        </li>\n      </ol>\n      <fieldset>\n        <div>\n          <label for=\"repo\">repo:</label><br/>\n          <input id=\"repo\" class=\"form-control\" type=\"text\" placeholder=\"owner/repo\">\n          <p class=\"note\">\n            A <strong>public</strong> GitHub repository. This is where the blog\n            post issues and issue-comments will be posted.\n          </p>\n        </div>\n      </fieldset>\n\n      <h3>Blog Post<->Issue Mapping</h3>\n      <p>Choose how Utterances will map blog posts to GitHub issues.</p>\n      <fieldset>\n        <div class=\"form-checkbox\">\n          <label>\n            <input type=\"radio\" value=\"pathname\" name=\"mapping\" checked=\"checked\">\n            Issue title contains page pathname\n            <p class=\"note\">\n              Utterances will search for an issue whose title contains the blog post's pathname\n              URL component. If a matching issue is not found, Utterances will automatically\n              create one the first time someone comments on your post.\n            </p>\n          </label>\n        </div>\n        <div class=\"form-checkbox\">\n          <label>\n            <input type=\"radio\" value=\"url\" name=\"mapping\">\n            Issue title contains page URL\n            <p class=\"note\">\n              Utterances will search for an issue whose title contains the blog post's URL.\n              If a matching issue is not found, Utterances will automatically create one the first\n              time someone comments on your post.\n            </p>\n          </label>\n        </div>\n        <div class=\"form-checkbox\">\n          <label>\n            <input type=\"radio\" value=\"title\" name=\"mapping\">\n            Issue title contains page title\n            <p class=\"note\">\n              Utterances will search for an issue whose title contains the blog post's title.\n              If a matching issue is not found, Utterances will automatically create one the first\n              time someone comments on your post.\n            </p>\n          </label>\n        </div>\n        <div class=\"form-checkbox\">\n          <label>\n            <input type=\"radio\" value=\"issue-number\" name=\"mapping\">\n            Specific issue number\n            <p class=\"note\">\n              You configure Utterances to load a specific issue by number. Issues are not automatically\n              created.\n            </p>\n          </label>\n        </div>\n        <div class=\"form-checkbox\">\n          <label>\n            <input type=\"radio\" value=\"specific-term\" name=\"mapping\">\n            Issue title contains specific term\n            <p class=\"note\">\n              You configure Utterances to search for an issue whose title contains a specific term of your choosing.\n              If a matching issue is not found, Utterances will automatically create one the first\n              time someone comments on your post. The issue's title will be the term you chose.\n            </p>\n          </label>\n        </div>\n      </fieldset>\n\n      <h3>Enable Utterances</h3>\n\n      <p>Add the following script tag to your blog's template. Position it where you want the\n      comments to appear. Customize the layout using the <code>.utterances</code> and\n      <code>.utterances-frame</code> selectors.\n      </p>\n      <div class=\"config-field\" id=\"script\" class=\"highlight highlight-text-html-basic\"></div>\n      <button id=\"copy-button\" type=\"button\" class=\"btn btn-blue code-action\">Copy</button>\n      <br/>\n      <br/>`;\n\n    this.element.addEventListener('submit', event => event.preventDefault());\n    this.element.action = 'javascript:';\n\n    this.script = this.element.querySelector('#script') as HTMLDivElement;\n\n    this.repo = this.element.querySelector('#repo') as HTMLInputElement;\n\n    const copyButton = this.element.querySelector('#copy-button') as HTMLButtonElement;\n    copyButton.addEventListener(\n      'click',\n      () => this.copyTextToClipboard(this.script.textContent as string));\n\n    this.element.addEventListener('change', () => this.outputConfig());\n    this.element.addEventListener('input', () => this.outputConfig());\n    this.outputConfig();\n  }\n\n  private outputConfig() {\n    const mapping = this.element.querySelector('input[name=\"mapping\"]:checked') as HTMLInputElement;\n    let mappingAttr: string;\n    // tslint:disable-next-line:prefer-conditional-expression\n    if (mapping.value === 'issue-number') {\n      mappingAttr = this.makeConfigScriptAttribute('issue-number', '[ENTER ISSUE NUMBER HERE]');\n    } else if (mapping.value === 'specific-term') {\n      mappingAttr = this.makeConfigScriptAttribute('issue-term', '[ENTER TERM HERE]');\n    } else {\n      mappingAttr = this.makeConfigScriptAttribute('issue-term', mapping.value);\n    }\n    this.script.innerHTML = this.makeConfigScript(\n      this.makeConfigScriptAttribute('repo', this.repo.value === '' ? '[ENTER REPO HERE]' : this.repo.value) + '\\n' +\n      mappingAttr);\n  }\n\n  private makeConfigScriptAttribute(name: string, value: string) {\n    // tslint:disable-next-line:max-line-length\n    return `<span class=\"pl-s1\">        <span class=\"pl-e\">${name}</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>${value}<span class=\"pl-pds\">\"</span></span></span>`;\n  }\n\n  private makeConfigScript(attrs: string) {\n    // tslint:disable-next-line:max-line-length\n    return `<pre><span class=\"pl-s1\">&lt;<span class=\"pl-ent\">script</span> <span class=\"pl-e\">src</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>https://utteranc.es/client.js<span class=\"pl-pds\">\"</span></span></span>\\n${attrs}\\n<span class=\"pl-s1\">        <span class=\"pl-e\">async</span>&gt;</span>\\n<span class=\"pl-s1\">&lt;/<span class=\"pl-ent\">script</span>&gt;</span></pre>`;\n  }\n\n  private copyTextToClipboard(text: string) {\n    const textArea = document.createElement('textarea');\n    // tslint:disable-next-line:max-line-length\n    textArea.style.cssText = `position:fixed;top:0;left:0;width:2em;height:2em;padding:0;border:none;outline:none;box-shadow:none;background:transparent`;\n    textArea.value = text;\n    document.body.appendChild(textArea);\n    textArea.select();\n    try {\n      document.execCommand('copy');\n      // tslint:disable-next-line:no-empty\n    } catch (err) { }\n    document.body.removeChild(textArea);\n  }\n}\n","import { ConfigurationComponent } from './configuration-component';\n\ndocument.querySelector('h2#configuration')!\n  .insertAdjacentElement('afterend', new ConfigurationComponent().element);\n"]}